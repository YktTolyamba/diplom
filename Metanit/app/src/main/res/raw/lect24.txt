<style>h3 {margin-bottom: -15px; }</style><center><h3>12. Текстовые файлы</h3></center>
Типизированные и текстовые хранятся в двоичном виде (состоит из
компонент одного типа).
Текстовыми называют файлы, состоящие из любых символов, т.е. α-
расписаны ASCII кодами.
Можно редактировать любым текстовым редактором. Блокнот, Word, FARF4.
Если файл записан из ASCII кодов => он текстовый файл.
Поток – это абстрактное понятие, относящееся к любому переносу данных
от источника к приемнику. Поток может быть ввод или вывод либо на файл
(экран)
Поток С открывается следующим образом:
FILE *f=fopen (const char *s, const char *c), где
s – имя файла (может быть произвольным)
с – параметр, определяющий направление потока – режим открытия.
Здесь f - логическое имя, s - физическое имя
Режим открытия файла:
“r” – файл открывается для чтения (read);
“w” – открывается пустой файл для записи (while), если файл существует, он
стирается;
“r+” – файл открывается для чтения и записи (файл должен существовать)ж
“w+” – открывается пустой файл для чтения и записи (если файл существует,
он стирается)ж
“a” – файл открывается для добавления информации в его конец (append)
“a+” – файл открывается для чтения и добавления информации в его конец.
Для чтения используется функция:
2
fscanf(f, <формат>, <список переманных>);
Для записи используется функция:
fprintf(f, <формат>, <список выражений>);
После завершения обработки необходимо закрыть файл: fclose (f);
Правила чтения и вывода такие же как и чтение и вывод на экран, т.е.
добавляется только f.
В чем разница между <список переманных> и <список выражений>?
Выражение может быть логические и арифметические {не только
переменные значения}
Работа с числами
Пример1: Создать файл output.txt, содержащий значения трех введенных
чисел n(long), m(int), a(float).
#include <stdio.h>
void main()
{long n; int m; float a;
// наглядно вводим
printf(‘n _ m _ a=’); scanf (“%ld%i%f”, &n, &m, &a);
// описываем файл
FILE *f=fopen (“output.txt”,”w”);
fprintf (f, “%ld _ %i _ %f”, n, m, a);
fclose(f);
Пример2: Дан файл output.txt, содержащий значения трех чисел n, m, a.
Напечатать значения этих чисел на экране.
#include <stdio.h>
void main()
{ long n; int m; float a;
3
FILE *f=fopen (“output.txt”,”r”);
fscanf(f, “%ld _ %i _ %f”, &n, &m, &a);
printf(“n=%ld _ m=%i _ a=%f”, n, m, a);
fclose (f);
}
Пример3: Дан файл output.txt, содержащий значения трех чисел n, m, a.
Создать новый файл output2.txt, содержащий сумму n+m и a
2
.
#include <stdio.h>
void main()
{ long n, int m, float a;
FILE *f1=fopen (“output.txt”,”r”);
FILE *f2=fopen (“output2.txt”,”w”);
fscanf(f1,”%ld _ %i _ %f”, &n, &m, &a);
fprintf(f2, “%ld _ %f”, m+n, pow(a,2));
fclose (f1); fclose(f2); // можно fclose(f1,f2);
}
Почему ld?
Работа с массивами
Пример4: Дан файл input.txt содержащий следующие данные: в первой
строке размерность, во второй строке массив. Вычислить среднее
арифметическое.
Первая строка: 4
Вторая строка: 2 _ 6 _ 7 _ 8
#include <stdio.h>
void main()
{ int n, a[100], i; float s;
FILE *f=fopen(“input.txt”,”r”) // сперва считываем n
fscanf(f,”%i”,&n);
4
for (i=1; i<=n; i++)
fscanf(f, “%i”, &a[i]);
s=0;
for for (i=1; i<=n; i++)
s+=a[i];
s=s/n;
printf(“s=%f”,s);
fclose(f);
}
Пример5: Дан файл input.txt, содержащий в первой строке целые числа
разделенные пробелами, найти среднее арифметическое этих чисел.
#include <stdio.h>
void main()
{ int n, a[100], i; float s;
FILE *f=fopen(“input.txt”,”r”); n=0;
while (!feof(f))
fscanf (f, “%i”, &a[++n]); // сперва прибывает, потом прочитает
s=0;
for (i=1; i<=n; i++) s+=a[i]; s=s/n; printf (“s=%f”,s);
fclose(f);
}
++n; что означает?
Здесь в чем разница с n++?
Peof?
Работа со строками и текстом
Пример6: Дан файл inputs.txt, содержащий 2 строки символов. Пусть
содержит следующую информацию:
Basic 1960
5
Pascal 1970
Пусть также имеем программу:
#include <stdio.h>
#include <stdlib.h>
#include <string>
FILE *f=fopen (“inputs.txt”, “r”); // глобальное переменное
char a[10], b[20], c[20]; // глобальные переменные
void main()
{ fscanf (f, “%s”, a); fscanf(f, “%s\n”,b);
fgets(c,25,f);
printf(“%s\n”, a);
printf(“%s\n”,b);
printf(“%s\n”,c);
fclose(f);
}
Чем отличается gets от scanf?
На экране что появится?
Basic
1960
Pascal 1970
Пример7: Копирование текстовых файлов.
Существует 2 файла => создать новый файл.
#include <stdio.h>
#include <stdlib.h>
#include <string>
void main()
{ FILE *f1, *f2; char ch;
f1=fopen (“input.txt”,”r”);
f2=fopen(“input2.txt”,”w”);
while (!feof (f1))
6
{ ch=fgets(f1);
fputc(ch,f2);
}
fclose(f1); fclose(f2);
}
// считываем по одному символу и записываем
Пример8: Копирование текстовых файлов. Использование параметров.
#include <stdio.h>
#include <stdlib.h>
#include <string>
void main(int argc, char *argv[])
{ FILE *f1, *f2; char ch;
f1=fopen(argv[1],”r”);
f2=fopen(argv[2],”w”);
// параметр argc – определяет размер массива argv
// argv – массив указателей на строки.
while (!feof(f1))
{ ch=fgetc(f1);
fputc(ch, f2);
}
fclose(f1); fclose(f2);
}
Когда компилируем, то получаем exe файл.
primer.exe, хотим скопировать input.txt на input2.txt, то вызывает пример
primer.exe из командной строки: C:\BorlandC\BIN\primer.exe
primer.exe _ input.txt _ input2.txt
argv[0] argv[1] argv[2]
Работа с файлами
7
Пример: Создать файл output.txt из n случайных чисел. В созданном файле
найти отрицательные числа и напечатать на экране.
#include <fstream.h> // для работы с файлами.
#include <iostream.h> // ввод/ вывод на экране
void main()
{ int i,n; float x[10];
cout << “n=”; cin>>n;
ofstream out (“output.txt”); // открываем файл для ввода
randomize();
out<<n<<end;
for (i=1; i<=n; i++)
out<<10 – random(20)<<’_’;
out.close();
ifstream in (“output.txt”); // открываем для чтения
in>>n;
for (i=1; i<=n; i++) in>>x[i];
in.close()
// создаем поток
// c – консольное, на экране cout.
for (i=1; i<=n; i++)
if (x[i]<0) cout<<x[i]<<’_’;
cout<<endl;
}
Работа со строками
Проблемы были когда считывали целые слова не учитывая пробелы. При
работе со строками обычно используют функцию getline.
Правила записи при вводе:
in.getline(s????); - как get (возвращает под извлеченного из потока символа
или ЕОК), но копирует в s символов до конца строки.
8
Значит существует три класса для работы с файлами:
ifstream – класс входных файловых потоков;
ofstream – класс выходных файловых потоков;
fstream – класс двунаправленных файловых потоков.
Режимы открытия файлов:
in – открыть для чтения;
out – открыть для записи;
ate – установить указатель на конец файла;
app – открыть для добавления в конец.
(?)trunc – если файл существует, удалить;
nocreate – если файлы не существуют, выдать ошибку
noreplace – если файл существует, выдать ошибку
binary – открыть в двоичном режиме.
Бинарные файлы. Прошли текстовые файлы, α-е содержат тексты с ASCII
кодом. Бинарные коды не (же) увидим. Бинарные файлы записываются по
байтам в зависимости от переменных, если integer, то 2 байта, long – 4 байта.
Основные функции
size _ t fread (void *ptr, size_t size, size_t n, FILE *stream);
название файла
size_t fwrite(const void *ptr, size_t size, size_t n, FILE *stream);
int seek (FILE *stream, long offset, int whence);
перевести
означает – подвожу читающее устройство к позиции offset.
Пример1: Запись и считывание одного числа.
#include <conio.h>
#include <iostream.h>
long a;
void vvod() // функция ввода одного числа
{ FILE *fo-fopen (“1.txt”,”w”); // для записи
cout <<”a=”; cin>>a;
9
fwrite(&a, size of(a),1,fo);
fclose(fo);
}
void obr()
{ FILE *fi=fopen (“1.out”,”r”); // для чтения
fread (&a, size of(a),1,fi);
cout << “a*a=”<<a*a<<endl;
fclose(fi);
}
void main()
{clrscr(); vvod(); obr(); getch();
}
Пример2: Запись и считывание нескольких чисел
#include …
long a;
void maim()
{ FILE *fo=fopen(“2.out”,”w”);
int i=0;
while (1) // бесконечный цикл, цикл заканчивается когда break;
{ i++;
cout <<i<<”:”; cin>>a;
if (a==999) break; // число, α – е же должен входить в файл
fwrite(&a, sizeof(a),1,fo);
}
fclose(fo);
}
// когда из цикла выходим?
void obr()
{ FILE *fi=fopen (“2.out”,”r”);
10
int s=0;
while (!feof(fi))
{ fread(&a, sizeof(a),1,fi); // прочитало, потом перемещается
if (!feof(fi))
s+=a;
}
cout<<”s=”<<s; fclose(fi);
}
void main()
{clrscr(); vvod(); obr(); getch();
}
// что делает функция obr? суммирует все элементы
Почему?
// конец файла не надо суммировать.
// если его нет, то лишний раз последний а прибавит.
Пример3: Работа с массивами
В предыдущих примерах записывали по одному элементу, но можно
записывать по массивам.
#include…
long a[5];
void vvod()
{ FILE *fo=fopen(“3.out”,”w”);
int i;
for (i=0; i<5; i++)
{ cout<<i<<”:”; cin>>a[i];}
fwrite (a,sizeof(a),1,fo); // полностью массив записан
fclose(fo);
}
// почему без адреса? имя массива всегда является адресом.
// в цикле можно записать по несколько раз – example
11
void obr()
{ FILE *fi=fopen(“3.out”,”r”);
int s=0;
fread (a,sizeof (a),1,fi);
for(i=0; i<5; i++) s+=a[i];
cout<<”s=”<<s<<endl;
fclose(fi);
}
void min()
{clrscr(); vvod(); obr();getch();}
Пример: Корректировка данных
// в текстовых файлах невозможно корректировать.
#include …
int a;
void vvod()
{ FILE *f=fopen (“4.out”,”w”);
int i=0;
while(1)
{ cout<<i++<<”:”; cin>>a;
if (a==-99) break;
fwrite(&a, sizeof(a),1,f);
}
fclose(f);
}
void korr()
int n;
FILE *f=fopen(“4.out”,”r+”); // для чтения и записи
cout<<”введите номер исправляемой записи:”;
cin>>n; // нумерация начинается с нуля.
fseek(f,n*sizeof(a),SEEK_SET);
12
fread(&a,sizeif(a),1,f);
cout<<”a=”<<a<<endl;
cout<<”введите новое число;” ; cin>>a;
fseek(f, n*sizeof(a),SEEK_SET);
fwrite(&a,sizeif(a),1,f); fclose(f);
}
// почему 2 seek?
6 7 8 9 10
. . . . .
хочу поменять его, но если второго seek не будет, то вместо 9 будет 100
Первый seek читающее устройство перейдет => потом второй seek обратно
перенесет.
whence может быть: SEEK_SET – счет начинается сначала
 SEEK_CUR – счет начинается с текущей позиции
 SEEK_END – подводит конец.
void obr() {-||-} // можно просуммировать
void main()
{ int n; clrscr(); // можно поставить меню
while(1){
cout<<”1. ввод данных \n”;
cout<<”2. обработка данных \n”;
cout<<”3. корректировка данных \n”;
cout<<”4. выход \n”;
cout<<”ваш выбор:”; cin>>n;
switch(n){
case 1: vvod(); break;
case 2: obr(); break;
case 3: korr(); break;
case 4: exit(0); // выход с ошибкой 0
}
13
}
getch();
}
почему стоят break? Почему здесь нет?
Что будет если нету break?
Если же будет break => перейдет к следующему case 2 – например