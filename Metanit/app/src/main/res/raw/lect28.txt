<style>h3 {margin-bottom: -15px; }</style><center><h3>16. Объектно-ориентированное программирование</h3></center>
Объектно-ориентированное программирование - это новый способ подхода к
программированию. Объектно-ориентированное программирование взят лучшие
черты структурного программирования, дополняет его новыми идеями, которые
переводят в новое качество подход к созданию программ.
Наиболее важное понятие языков объектно-ориентированного программирования
- это понятие объекта(object). Объект - это логическая единица, которая содержит
данные и правила обработки этих данных. В языке C++ в качестве таких правил
обработки выступают функции. Т.е. объект в Turbo C++ объединяет в себе данные
и функции, обрабатывающие эти данные. Внутри объекта данные и функции
могут быть приватными (privite) и общими (public). Можно сказать, что объект -
это переменная определенного пользователем типа. Объектно-ориентированные
языки обладают тремя важнейшими характеристиками: инкапсуляция
(encapsulation), наследование (inharitance) и полиморфизм (polymorphism).
Понятие инкапсуляции означает, что в качестве единицы целого рассматривается
объединение некоторой структуры данных и некоторой группы функций.
Свойства объектов, хранятся в структурах данных, напоминающих структуры
языка С, а поведение объектов реализуется в виде функций, называемых
функциями-членами (member function) объектов. Если данные или функции-члены
объявлены приватными, то к ним нет доступа извне. Зато данные и функции,
объявленные общими доступны любому внешнему объекту.
Объектно-ориентированное программирование поддерживает полиморфизм,
означающий, что одно и то же имя может использоваться для логически
связанных, но разных целей. Т.е. имя определяет класс действий, которые в
зависимости от типа данных могут существенно отличаться. Например, можно
определить три типа переменных: целые, комплексные числа и вектора. Для
каждого из них можно определить функцию sum(x,y) - сумму двух переменных.
В зависимости от того, какого типа будут переменные x и y, работать эта
функция будет по разному. Причем полиморфизм поддерживается системой
Turbo C++ и во время компиляции, и во время выполнения программы.
И, наконец, наследование позволяет одним объектам приобретать
атрибуты и свойства других объектов. Наследование поддерживает
иерархическую классификацию.
Введение в понятие класса и объекта
Одним из самых глазных понятий языка C++ является понятие класса
(class). В языке C++ для того, чтобы определить объект (object), надо
сначала определить его форму (шаблон) с помощью ключевого слова
class. Понятие класса напоминает понятие структуры. Рассмотрим
пример, в котором определим класс типа queue, который будет затем
использоваться для определения объектов:
#include <iostrem.h>
// Создаем класс queue (очередь)
class queue {
int q[100];
2
int i,j;
public:
 void init(void);
 void qput(int m);
 int qget(void);
};
Это объявление класса - т.е. нового типа переменных. Класс может
содержать приватную часть (private), общую часть (public) и
защищенную часть (protected). По умолчанию все элемента класса
приватные. В нашем примере - это переменные i, j и массив q[].
Приватные элементы не могут использоваться никакими функциями, не
являющимися членами класса (member function). Это один из путей
реализации принципа инкапсуляции - доступ к элементам данных может
контролироваться объявлением их приватными. Можно также
определить и приватные функции, которые могут вызываться только
другими членами класса.
Для того, чтобы объявить другую часть класса общей, т.е. сделать
переменные и функции класса доступными из других частей программ
следует объявить их после ключевого слова public. Переменные и
функции, объявленные общими, доступны для всех других функций
программы, т.е. остальная часть программы имеет доступ к объекту
через общие переменные и функции. Рекомендуется объявить все
переменные приватными, а доступ к ним осуществлять через общие
функции.
Функции init(), qput() и qget() называются функциями членами
класса (member function), так как они являются элементами класса
queue.
Помните, что объект формирует связь между кодами и данными.
Только те функции, которые объявлены в классе имеют доступ к
приватной части класса. Когда вы создали класс, вы можете определить
объект этого типа с использованием имени класса. Например
объявлением
queue intl,int2;
мы создали два объекта одного типа.
Важно отметить, что классы это не объекты, а шаблоны для
создания объектов. Когда нужно, создается экземпляр класса, который
называется объектом. Отношение между классом и объектом такое же,
как между типом данных и переменной.
Можно создать объект и по время объявления класса, поместив имя
объекта после закрывающейся фигурной скобки, как это делали со
структурами. То есть в C++ класс создает новый тип данных, который
может использоваться для создания объектом этого типа.
Объявление класса в общем виде следующее:
class имя класса {
приватные данные и функции
3
public:
общие данные и функции
} список объектов;
Конечно, список объектов может отсутствовать. При объявлении класса
используются прототипы функций-членов класса. C++ не поддерживает
устаревший, традиционный способ объявления функции. Все функции в
C++ должны иметь прототипы.
Когда же требуется создать реальную функцию-член класса,
необходимо указать к какому классу относится эта функция. Например,
можно определить функцию init() класса queue следующим образом.
void queue::init(int i){
if (i==10) {
cout <<" Введите число";
cin>>i;
return;
}
cout <<”Работает функция init()”;
}
Операция :: называется правилом принадлежности (scope
resolution). Она сообщает компилятору, к какому классу принадлежит
эта функция, или другими словами, к какой (чьей) сфере влияния
принадлежит эта функция. В языке C++ разные классы могут иметь
функции с одинаковыми именами. Операция :: и имя класса позволяют
компилятору определить принадлежность функции.
Чтобы вызвать функцию-член класса в той части программы,
которая не является частью класса, надо использовать имя объекта и
оператор точка (.), как делается с элементами структур. Например, если
объявлены два объекта а и b класса queue (queue a,b;), то каждый объект
имеет функцию init(). Для вызова этой функции нужно написать:
a.init();
Следует помнить, что а и b два разных объекта. Хотя содержание
функции init() в объектах одинаковое, сами функции a.init() и b.init()
разные.
С другой стороны функция член класса может вызвать другую
функцию член того же класса непосредственно, не используя операцию
точка (.). Операцию точка надо использовать только тогда, когда
функция член класса вызывается в части программы, не принадлежащей
классу.
Следующая программа сводит воедино все, что было до сих пор
сказано:
#include <iostream.h>
#include <conio.h>
//вводим класс queue
class queue{
 int q[100];
4
 int sloc, rloc;
 public:
 void init(void);
 void qput(int i);
 int qget(void);
};
void queue::init(void) //объявление функиии членов класса
{ rloc=sloc=0; }
int queue::qget(void)
{
if (sloc==rloc) {
cout<<" Очередь пуста ";
return 0;
}
rloc++;
return q[rloc];
}
void queue::qput(int i){
if (sloc==100){
cout<<"Очередь полна";
return;
}
q[++sloc]=i;
}
main(void)
{ clrscr();
queue a,b; // Созданы два бъекта класса queue
a.init(); b.init();
a.qput(10); b.qput(9); a.qput(20); b.qput(1);
cout<<a.qget()<< " ";
cout << a.qget()<< " ";
cout << b.qget()<< " ";
cout<<b.qget()<< "\n";
return 0;
}
Особенностью этого примера по сравнению с предыдущими
является тот факт, что функция main() стоит не на первом месте. Нет
правила обязывающего ставить main() впереди программы. Обычно для
C++ функции члены классов определяются впереди функции main(), ив
дальнейшем мы будем придерживаться этого принципа. На практике
определение классов, как правило, выносится в отдельный
подключаемый файл.
5
Наследственность
Наследственность - одна из главных черт объектно-ориен-
тированного программирования. В C++ наследственность реализуется
возможностью объединять один класс с другим при его объявлении.
Чтобы показать как это делается, рассмотрим пример: определим
класс, описывающий средство дорожного транспорта, количество колес
у него и количество перевозимых пассажиров.
class transport{
int kol;
int puss;
public:
void set_kol(int num);
int get_kol(void);
void set_pass(int num);
int get_pass(void);
};
Это общее определение дорожного транспорта может быть
использовано для того, чтобы определить конкретный объект.
Например, определить класс, называемый trakt, с использованием класса
transport:
class trakt: public transport{
int gruz; public:
void set_gruz(int size);
int get_gruz(void);
void show(void);
}
Основная форма наследования:
class имя-класса : режим-доступа имя_наследуемого класса{..}
Здесь режим-доступа - это опция, которая может быть любой из
private, public и protected. Рассмотрим использование опции public. Эта
опция означает, что все элементы типа public предка будут типа
protected для класса, который наследует его. Таким образом члены
класса trakt имеют доступ к членам функциям класса transport, так, как
если бы они были объявлены внутри класса trakt. Однако функции
класса trakt не имеют доступа к приватной части класса transport. Далее
приводится пример, иллюстрирующий понятие наследования.
#include <iostream.h>
class transport{
int kol;
int pass;
public:
void set_kol(int num);
int get_kol(void);
void set_pass(int num);
6
int get_pass(void);
}; // конец объявления класса transport
class trakt:public transport{
int gruz;
public:
void set_gruz(int size);
int get_gruz(void);
void show(void);
}; // конец объявления класса trakt
enum type {car, van, bus};
class avto:public transport{
type car_type;
public:
void set_type(type t);
type get_type(void);
void show(void);
};//конец объявл. клас-.а auto - наследника класса transport
void transport::set_kol (int num)
{ kol=num;
}
// объявление функции члена класса transport
int transport::get_kol(void)
{
return kol;
} // объявление функции члена класса transport
void transport::set_pass(int num)
{ pass=num;
} // объявление функции члена класса transport
int transport::get_pass(void)
{
return pass;
}
void trakt::set_gruz(int num)
{ gruz=num;
}
int trakt:: get_gruz(void)
 {
return gruz;
}
void trakt:: show(void)
{
cout <<" колеса: "<<get_kol()<<"\n" ;
cout <<" пассажиры: "<<get_pass( )<<"\n";
7
cout <<" вес груза: "<<gruz<<"\n";
}
// avto
void avto::set_type(type t)
{ car_type=t;}
type avto::get_type(void) {
return car_type;
}
void avto::show(void)
{
cout<< " колеса: "<<get_kol()<<"\n";
cout<< " пассажиры: "<<get_pass()<<"\n"; cout<< " type:";
switch (get_type()){
 case van: cout<<"van \n"; break;
 case car: cout<<"car \n"; break;
 case bus: cout<<"bus \n"; break;
} // конец объявления функции show члена класса avto
}
void main()
{
trakt t1,t2; avto c;
t1.set_kol(18); t1.set_pass(2); t1.set_gruz(3200);
t2.set_kol(8); t2.set_pass(3); t2.set_gruz(1000);
t1.show(); t2.show();
c.set_kol(4); c.set_pass(6); c.set_type(van);
c.show();
}
Как показано в этом примере, главная польза наследования -
возможность сознавать базовую классификацию. На этом пути каждый
объект может быть представлен более подробно. Заметим, что trakt и
auto включают в себя функции члены под именам show( ) и эти функции
разные. Это еще один способ реализации полиморфизма. Каждая из
функций show() связана со своим классом, и компилятор может легко
использовать именно ту функцию, которая нужна.
Конструкторы и деструкторы
Для большинства объектов естественно требовать, чтобы они были
инициализированы да начала их использования. Примером тому
валяется класс queue. Прежде чек он будет использоваться, переменным
sloe и rloc должно быть присвоено значение 0. Это было реализовано
8
функцией init(). Так как необходимость инициализации объектов
является общим требованием, то язык C++ предоставляет возможность
делать это автоматически при создании объекта, т.е. при объявлении
переменной. Эта автоматическая инициализация реализуется
использованием функции, называемой конструктор (construktor).
Конструктор - это специальная функция, являющаяся членом
класса и имеющая то же самое имя, что и класс. Например, класс queue
можно было объявить так:
// создание класса queue
class queue;
int q[100];
int sloc, rloc;
public:
queue(void); // конструктор класса queue void
qput(int i);
int qget(void);
}
Функция конструктор класса не может возвращать значение.
Поэтому не объявлен тип возвращаемого значения функции. Обь-
явление функции queue(), т.е. конструктора, можно сделать так:
queue::queue(void) // конструктор класса queue
{ sloc=rloc=0;
cout << " queue инициализирована \n";
}
Сообщение включено в эту функцию для иллюстрации того, что
функция работает. На практике конструктор, как правило, никаких
сообщений не выдает.
Вызывается функции конструктор в тот момент, когда создается
объект. Для локального объекта это будет происходить при каждом
объявлении переменной данного класса.
Дополнением к функции конструктор будет функция деструктор
(destructor). Во многих случаях необходимо, чтобы были произведены
какие-либо действия при окончании работы объекта. Это может быть
восстановление экрана, закрытие файлов, освобождение памяти и т.д. В
C++ такой функцией и является деструктор. При создании локального
объекта, при вхождении в блок вызывается конструктор, а при выходе из
блока, т.е. при прекращении действия локального объекта, выполняется
деструктор.
Деструктор имеет такое же имя как и конструктор, но перед ним
ставится знак тильды (~). Определяемый класс queue не нуждается в
деструкторе, тем не менее включим эту функцию в качестве
иллюстрации:
#include <iostream.h>
9
#include <conio.h>
// объявление класса
class queue {
int q[100];
int sloc,rloc;
 public:
 queue(void); // конструктор
 ~queue(void); // деструктор
 void qput(int i);
 int qget(void);
};
// определение функции конструктор
queue::queue(void)
{
sloc=rloc=0;
cout << " очередь инициализирована\n";
}
// определение функции-деструктора
queue:: ~queue(void)
{cout << "очередь разрушена\n";
}
void queue::qput(int i)
{
if (sloc==100){
cout <<"очередь полна";
return;
}
sloc++; q[sloc]=i;
}
int queue::qget(void)
{
if (rloc==sloc){ cout<<"очередь пуста\n";
return 0;
}
return q[++rloc];
}
main()
{ clrscr();
queue a, b; // объявление двух объектов типа queu
a.qput(10);
b.qput(19) ;
a.qput(20);
b.qput(1);
cout<<a.qget()<<" ";
10
cout<<a.qget()<<" ";
cout<<b.qget()<<" ";
cout<<b.qget()<<"\n";
cout<<b.qget()<<"\n";
return 0;
}
В результате работы этой программы получим:
Очередь инициализирована
Очередь инициализирована
10 20 19 1
Очередь пуста
0
Очередь разрушена
Очередь разрушена