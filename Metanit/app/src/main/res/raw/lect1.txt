<style>h3 {margin-bottom: -30px; }</style><center><h3>1. Построение программ</h3>
<style>h4 {margin-bottom: -15px; }</style><h4>1.1. Алфавит языка</h4></center>
<style>p {margin-bottom: -15px; }</style><p>Как и любой язык программирования, C/C++ имеет свой алфавит – набор
<style>li {margin-bottom: -15px; }</style>символов, разрешенных к использованию и воспринимаемых компилятором.
<style>ol {margin-bottom: -30px; }</style>В алфавит языка входят:
<ol><li>Латинские строчные и прописные буквы: A, B, C,…, Z и a, b, c,…,z.</li>
<li>Цифры от 0 до 9.</li>
<li>Специальные символы, участвующие в построении конструкций языка: + - * / = < > [ ] . , ( ) : ; ^ @ { } $ # ‘ ? % !</li></ol></p>
<center><h4>1.2. Имена и зарезервированные слова</h4></center><p>Текст программы записывается при помощи латинских букв, цифр и
знаков. Буквы допускаются прописные и строчные. Особую роль в тексте
программы имеют имена и зарезервированные слова.
Имена применяют для обозначения переменных, констант и других
объектов, определенных в программе. Имя может состоять из любого
количества букв или цифр, но должно начинаться с буквы. В имя можно
включать знак подчеркивания. Прописные и строчные буквы различаются.
Программу легче понять, если имена подбираются так, чтобы в них
отражался смысл обозначаемых данных. Например, сумму чисел обозначают
через S или summa, максимальное значение max и т.п.
C/C++ имеет большое количество зарезервированных (ключевых)
слов. Эти слова не могут быть использованы в качестве идентификаторов
(имен) в программе.
Список ключевых слов таков:
<img src="file:///android_asset/n1-0-1.jpg" width="100%">
<img src="file:///android_asset/n1-0-2.jpg" width="100%"></p>
<center><h4>1.3. Общая структура программ</h4></center>
Начнем знакомство с C/C++ с программы, которая вводит два целых
числа с клавиатуры, складывает их и выводит сумму заданных чисел на
экран.
<img src="file:///android_asset/n1-1.jpg" width="100%">
<p>На этом примере видны основные особенности записи программ:
<ol><li>Первая строка этой программы – директива препроцессора, по которой
в текст программы вставляется заголовочный файл <stdio.h>,
содержащий описание использованных в программе функций
ввода/вывода scanf и printf.</li>
<li>Вторая строка. Программа на C++ состоит из функций. Одна из
функций должна иметь имя main. Выполнение программы начинается
с первого оператора этой функции. Если функция не должна
возвращать значение, указывается тип void.</li>
<li>Третья строка. Тело функции начинается с фигурной скобки.</li>
<li>Четвертая строка. Описание локальных переменных целого типа a,
b, s.</li>
<li>Тело функции main состоит из отдельных операторов (команд) – 5, 6 и
7 строки. Каждый оператор заканчивается точкой с запятой.</li>
<li>Восьмая строка. Тело функции заканчивается фигурной скобкой.</li></ol></p>
<center><h4>1.4. Комментарии</h4></center>
Кроме конструкций языка, программа может содержать комментарии.
Комментарий либо начинается с двух символов // и заканчивается символом
перехода на новую строку, либо заключается между символами-скобками /*
и */. Внутри комментария можно использовать любые допустимые на
данном компьютере символы, а не только символы из алфавита C++.
<center><h4>1.5. Константы и переменные</h4></center>
Данные, которыми оперирует программа, могут быть определены в ней
как неизменные, либо как способные изменять свое значение. Первые
называются константами, а вторые переменными. И переменные и константы
размещаются в памяти компьютера. Перед использованием любая
переменная должна быть описана.
Общий вид оператора описания переменных:
[класс памяти][const]тип имя [инициализатор]
Здесь и далее в квадратных скобках ([]) будем писать необязательный
параметр.
Рассмотрим правила задания составных частей этого оператора:
Необязательный класс памяти может принимать одно из значений auto,
extern, static и register. О них расскажем позже.
Модификатор const показывает, что значение переменной изменять нельзя.
Такую переменную называют константой.
При описании можно присвоить переменной начальное значение, это
называется инициализацией. Инициализатор можно записывать в двух
формах – со знаком равенства (=значение) или в круглых скобках
(значение).
Примеры
<img src="file:///android_asset/n1-6.jpg" width="100%">
Если тип инициализирующего значения не совпадает с типом переменной,
выполняются преобразования типов по определенным правилам.
Операция приведения типов записывается в двух формах:
тип (выражение)
(тип) выражение
Результатом операции является значение заданного типа, например
<img src="file:///android_asset/n1-7.jpg" width="100%">
Область действия переменного – это часть программы, в которой его можно
использовать для доступа к связанной с ним области памяти. В зависимости
от области действия переменная может быть локальной или глобальной. Если
переменная определена внутри блока (блок ограничен фигурными скобками),
она называется локальной, область ее действия – от точки описания до
конца блока, включая все вложенные блоки. Если переменная определена вне
любого блока, она называется глобальной и областью ее действия
считается файл, в котором она определена, от точки описания до его конца.
<center><h4>1.6. Оператор простого присваивания</h4></center>
Оператор присваивания придает переменной конкретное значение,
например:
x=2008; y=x+1; z=sin(M_PI/x);
Присваивание заполняет участок памяти, отведенный для переменной, новым
значением, одновременно уничтожая старое.
Общая схема оператора присваивания:
<имя>=<выражение>;
Все приведенные примеры укладываются в эту схему, т.к. и постоянные
величины, и переменные являются частным случаем выражения.
<center><h4>1.7. Операторы ввода и вывода данных</h4></center>
Программы форматированного ввода и вывода содержатся в
стандартной библиотеке и доступны после включения файла <stdio.h>.
Оператор
printf(format_string [,arguments…]);
осуществляет печать данных на стандартный вывод в соответствии с
указанным форматом представления данных. Формат представляет собой
строковую константу, содержащую объекты двух типов: обычные символы,
которые просто копируются в выходной поток, и спецификации
преобразования, каждая из которых вызывает преобразование и печать
очередного аргумента.
Спецификация формата в общем виде
%[flags][width][.precision][F|N][h|l|L] type
Спецификации преобразования (type)
<img src="file:///android_asset/n1-2.jpg" width="100%">
<img src="file:///android_asset/n1-3.jpg" width="100%">
Префиксы F и N должны использоваться только с символами типа ”s” и ”p”,
поскольку они относятся к аргументам, которые передают указатели:
F –используется для печати значений, которые были объявлены как far в
малой модели памяти;
N - используется для печати значений near в средней, большой и
сверхбольшой моделях памяти.
Префиксы h и l используются для указания того, что тип аргумента
short int и long int, а L – long double.
Пример
<img src="file:///android_asset/n1-4.jpg" width="100%">
Если мы введем a=17 и b=5, то на экране получим
<img src="file:///android_asset/n1-5.jpg" width="100%">
Здесь символы ᴗ означают пробел.
Аналогично функция
<center>scanf(format_string [,arguments…]);</center>
осуществляет ввод данных из стандартного ввода и преобразование их во
внутреннее представление в программе.
Спецификация формата в общем виде
<center>%[*][width][F|N][h|l|L] type</center>
Спецификации преобразования функции scanf практически полностью
совпадают со спецификациями преобразования функции printf.
Аргументами программы ввода могут быть только простые
переменные или имена символьных массивов для ввода символьных строк,
причем перед именами простых переменных обязательно должен стоять знак
амперсенд (& - операция получения адреса объекта).
При выполнении оператора scanf программа останавливается и ждет,
пока нужное количество чисел не будет введено с клавиатуры. Вводимые
числа разделяют пробелами или нажатием клавиши Enter. Заканчивается
ввод всегда нажатием клавиши Enter.
Например, после выполнения оператора scanf(”%i%f%f”,&a,&b,&c),
если на клавиатуре набраны числа 3 4.0 -5.025, переменные a, b, c
примут значения a=3, b=4, c=-5.025.
Если за символом процента (%) следует символ, который не является
символом управления форматом, этот символ и все следующие символы
рассматриваются как обычная последовательность символов, т.е.
последовательность символов, которая должна совпадать с вводом.
Звездочка (*), следующая за символом процент, подавляет
присваивание следующего входного поля, которое интерпретируется как
поле указанного типа. Поле читается, но не сохраняется.