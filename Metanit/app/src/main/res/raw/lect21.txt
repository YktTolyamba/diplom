<style>h3 {margin-bottom: -15px; }</style><center><h3>9. Указатели</h3></center>
#include <iostream>
#include <conio.h>
using namespace std;
void main()
{ int a[10], i,n, *pa, *pb;
 cout<<"n="; cin>>n;
 for (i=0;i<n;i++) cin>>a[i];
 for (i=0;i<n;i++) cout<<a[i]<<' ';
 cout<<endl;
 pa=a;
 for (i=0;i<n;i++) cout<<*(a+i)<<' ';
 cout<<endl;
 pb=a;
 cout<<*pb<<endl;
 cout<<*(pb+3)<<endl;
 getch();
}
Динамические структуры данных
Элемент любой динамической структуры данных состоит из полей,
часть из которых предназначена для связи с соселними элементами.
Вот, например, как выглядит описание элемента линейного списка
для хранения целых чисел:
struct Node {
int d;
Node *p;
}
В зависимости от решаемой задачи в программах применяются
различные виды динамических структур. Рассмотрим их на
примерах.

Стек
Стеком называется структура данных, в которой элемент, занесенный
первым, извлекается последним (LIFO). Для стека определены всего
две операции: занесение эдемента и выборка элемента. При выборке
элемент удаляется из стека, и это как раз то, что нам требуется.
#include <iostream>
using namespace std;
#include <conio.h>
struct Node{
 int d;
 Node *next;
 };
Node *top;
void print(Node **top);
void push();
int pop(Node **top);
int main(){
 push();
 print(&top);
cout<<"Удалили последний элемент: "<<pop(&top);
}
void push(){
Node *pv; int d;
freopen("input.txt","r",stdin);
freopen("output.txt","w",stdout);
 pv=new Node;
 cin>>d; pv->d=d; pv->next=0;
 top=pv;
while (!feof(stdin))
{
 pv=new Node;
 cin>>d; pv->d=d; pv->next=top;
3
 top=pv;
}
}
void print(Node **top){
 Node *temp=*top;
 while(temp)
 {
 cout<<temp->d<<' '<<'\n';
 temp=temp->next;
 }
}
int pop(Node **top){
 int temp=(*top)->d;
 Node *pv=*top;
 *top=(*top)->next;
 delete pv;
return temp;
}
Очередь
Очередью называется структура данных, в которой элемент,
занесенный первым, извлекается первым (FIFO). Для очереди
определены всего две операции – помещение в конец и выборка из
начала.
#include <iostream>
#include <fstream>
using namespace std;
struct Node{
 int d;
 Node *next;
 };
Node *pbeg, *pend;
void push();
4
void print(Node **top);
int del(Node **pbeg);
int main(){
 push();
 print(&pbeg);
cout<<"Удаляем первый в очереди: "<<del(&pbeg);
return 0; }
 void push(){
 Node *pv; int d;
 freopen("input.txt","r",stdin);
 freopen("output.txt","w",stdout);
 pv=new Node;
 cin>>d; pv
->d=d; pv
->next=0;
 pbeg=pv; pend=pbeg;
 while (!feof(stdin)){
 pv=new Node;
 cin>>d; pv
->d=d; pv
->next=0;
 pend
->next=pv; pend=pv;
 }}
void print(Node **top){
 Node *temp=*top;
 while(temp)
 { cout<<temp
->d<<' '<<'
\n';
 temp=temp
->next;
 }}
int del(Node **pbeg){
 int temp=(*pbeg)
->d;
 Node *pv=*pbeg;
 *pbeg=(*pbeg)
->next;
 delete pv;
5
 return temp;
}
Бинарное дерево
Каждый элемент (узел) дерева харктеризуется уникальным
ключом. Кроме ключа, узел должен содержать две ссылки: на свое
левое и правое поддерево. У всех узлов левого поддерева ключи
меньше, чем ключ данного элемента, а увсех узлов правого
поддерева – больше. В таком дереве, называемом деревом поиска,
можно найти любой элемент по ключу, двигаясь от корня и переходя
на левое или правое поддерево в зависимости от значения ключа в
каждом узле. Время поиска поределяется высотой дерева, которая
пропорциональна двоичному логарифму количества его элементов.
#include <iostream>
using namespace std;
struct Node{
 int d;
 Node *left, *right;
 };
Node *root;
void push();
void print(Node *root, int l);
void PreOrder(Node *root);
void PostOrder(Node *root);
void InOrder(Node *root);
int main(){
 push();
 print(root,0);
 cout<<endl;
 PreOrder(root); cout<<" - нисходящий-префиксный обход"<<endl;
 cout<<endl;
 PostOrder(root); cout<<" - восходящий-постфиксный обход "<<endl;
 cout<<endl;
6
 InOrder(root); cout<<" - смешанный-инфиксный обход "<<endl;
 return 0;
}
void push(){
 Node *pv, *prev, *pnew; int found, d;
 freopen("input.txt","r",stdin);
 freopen("output.txt","w",stdout);
 pv=new Node;
 cin>>d;
 pv->d=d; pv->left=0; pv->right=0;
 root=pv;
while (!feof(stdin)) {
cin>>d; found=0;
pv=root;
 while (pv&& !found) {
 prev=pv;
 if (d==pv->d) found=1;
 else if (d<pv->d) pv=pv->left;
 else pv=pv->right;
 }
 if (!found){
 pnew=new Node;
 pnew->d=d; pnew->left=0; pnew->right=0;
 if(d<prev->d)
 prev->left=pnew;
 else
 prev->right=pnew;
 }
}
}
void print(Node *root, int l){
if(root)
7
 { print(root
->left,l+1); // вывод левого поддерева
 for(int i=0; i<l;i++) cout<<" ";
 cout<<root
->d<<endl; // вывод правого поддерева
 print(root
->right,l+1);
 }}
// Нисходящий обход
void PreOrder(Node *root){
 if(root)
 { cout<<root
->d<<" ";
 PreOrder(root
->left); // вывод левого поддерева
 PreOrder(root
->right); // вывод правого поддерева
}}
// Восходящий обход
void PostOrder(Node *root){
 if(root)
 {
 PostOrder(root
->left);
 PostOrder(root
->right);
 cout<<root
->d<<" ";
 }}
// Смешанный обход
void InOrder(Node *root){
 if(root)
 {
 InOrder(root
->left);
 cout<<root
->d<<" ";
 InOrder(root
->right);
}}
8
Нисходящий обход. В этом случае первым читается корень, в
дальнейшем узлы читаются в процессе движения вниз и влево. Если
пути влево нет, то движение продолжается по ближайшему правому
пути.
Восходящий обход. Чтение начинается с левого листа. Каждый узел
читается после того, как прочитаны его левый и правый
порожденные.
Смешанный обход. Первым читается левый лист, затем следуют
последовательные подъемы и спуски. Каждый узел читается лишь
тогда, когда его левое поддерево полностью обойдено, после чего
обходится правое поддерево.